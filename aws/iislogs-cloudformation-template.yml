AWSTemplateFormatVersion: 2010-09-09
Parameters:
  IISLogsS3BucketName:
    Type: String
    Default: iislogs-upload
Resources:
  IISLogsS3CloudWatchLogsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:*'
            Resource:
              - 'arn:aws:logs:*:708478087677:log-group:/aws/lambda/iislogs-importer:log-stream:*'
              - 'arn:aws:logs:*:708478087677:log-group:/aws/lambda/iislogs-importer'
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:DeleteObject'
            Resource:
              - 'arn:aws:s3:::iislogs-upload/*'
      ManagedPolicyName: iislogs-policy
    DeletionPolicy: Delete
  IISLogsS3CloudWatchLogsRole:
    Type: AWS::IAM::Role
    DependsOn: IISLogsS3CloudWatchLogsPolicy
    Properties:
      RoleName: iislogs-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::708478087677:policy/iislogs-policy'
    DeletionPolicy: Delete
  IISLogsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
        Code:
          ZipFile: |
            import logging
            from urllib.parse import unquote_plus

            import boto3
            import botocore

            logger = logging.getLogger()
            logging.getLogger().setLevel(logging.INFO)

            def lambda_handler(event, context) :
              """Processes S3 put events and dumps the files content to cloudwatch logs"""

              records = event.get('Records', [])
              if not records:
                logger.warning("no records found")
                return

              logger.debug(f"processing {len(records)} file(s)")
              s3 = boto3.client('s3')
              for record in records:
                _dump_file(s3, record)

            def _dump_file(s3, record):
              """Dumps an s3 file to cloudwatch logs"""

              try:
                bucket = record['s3']['bucket']['name']
                key = unquote_plus(record['s3']['object']['key'])

                logger.debug(f"handling file {key}")
                s3_object = s3.get_object(Bucket=bucket, Key=key)

                iter_lines = s3_object['Body'].iter_lines()
                for line in iter_lines:
                  _dump_line(line)

                s3.delete_object(Bucket=bucket, Key=key)
                logger.debug(f"file {key} deleted")
              except botocore.exceptions.ClientError as e:
                if e.response['Error']['Code'] == 'NoSuchKey':
                  logger.error(f"file not found: {key}")
                else:
                  raise # something else has gone wrong

            def _dump_line(line):
              """Dumps a single line to cloudwatch logs"""
              logger.info(line.decode("utf-8"))
        FunctionName: iislogs-importer
        Handler: index.lambda_handler
        MemorySize: 128
        Role: !GetAtt IISLogsS3CloudWatchLogsRole.Arn
        Runtime: python3.7
        Timeout: 30
    DeletionPolicy: Delete
  IISLogsCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref IISLogsLambdaFunction]]
    DeletionPolicy: Delete
  IISLogsS3Bucket:
    Type: AWS::S3::Bucket
    DependsOn: IISLogsLambdaFunctionPermission
    Properties:
      BucketName: !Sub '${IISLogsS3BucketName}'
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt IISLogsLambdaFunction.Arn
    DeletionPolicy: Delete
  IISLogsLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt IISLogsLambdaFunction.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${IISLogsS3BucketName}'
    DeletionPolicy: Delete
